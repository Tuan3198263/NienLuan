const Notification = require("../models/notification.js");

// üìå L·∫•y danh s√°ch th√¥ng b√°o
const getNotifications = async (req, res) => {
  try {
    const notifications = await Notification.find().sort({ createdAt: -1 }); // S·∫Øp x·∫øp m·ªõi nh·∫•t l√™n ƒë·∫ßu
    res.status(200).json({ success: true, data: notifications });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: "L·ªói l·∫•y danh s√°ch th√¥ng b√°o",
      error: error.message,
    });
  }
};

// üìå T·∫°o th√¥ng b√°o m·ªõi
const createNotification = async (req, res) => {
  try {
    const { message, icon, type } = req.body;
    const newNotification = new Notification({ message, icon, type });
    await newNotification.save();
    res
      .status(201)
      .json({ success: true, message: "Th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c t·∫°o!", data: newNotification });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: "L·ªói t·∫°o th√¥ng b√°o",
      error: error.message,
    });
  }
};

// üìå ƒê√°nh d·∫•u th√¥ng b√°o l√† ƒë√£ ƒë·ªçc
const markAsRead = async (req, res) => {
  try {
    const { id } = req.params;
    await Notification.findByIdAndUpdate(id, { read: true });
    res.status(200).json({ success: true, message: "Th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c ƒë√°nh d·∫•u l√† ƒë√£ ƒë·ªçc" });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: "L·ªói khi c·∫≠p nh·∫≠t th√¥ng b√°o",
      error: error.message,
    });
  }
};


// üìå ƒê√°nh d·∫•u t·∫•t c·∫£ th√¥ng b√°o l√† ƒë√£ ƒë·ªçc
const markAllAsRead = async (req, res) => {
  try {
    await Notification.updateMany({}, { read: true });
    res.status(200).json({ success: true, message: "T·∫•t c·∫£ th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c ƒë√°nh d·∫•u l√† ƒë√£ ƒë·ªçc" });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: "L·ªói khi c·∫≠p nh·∫≠t t·∫•t c·∫£ th√¥ng b√°o",
      error: error.message,
    });
  }
};

// üìå X√≥a th√¥ng b√°o
const deleteNotification = async (req, res) => {
  try {
    const { id } = req.params;
    await Notification.findByIdAndDelete(id);
    res.status(200).json({ success: true, message: "Th√¥ng b√°o ƒë√£ b·ªã x√≥a" });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: "L·ªói khi x√≥a th√¥ng b√°o",
      error: error.message,
    });
  }
};

// üìå Xu·∫•t c√°c h√†m controller
module.exports = {
  getNotifications,
  createNotification,
  markAsRead,
  markAllAsRead, // Th√™m API m·ªõi v√†o danh s√°ch exports
  deleteNotification,
};
