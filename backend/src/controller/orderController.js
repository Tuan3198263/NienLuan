const axios = require('axios');
const Order = require('../models/order'); 
const Cart = require('../models/cart'); 
const Product = require('../models/product');  // Import model s·∫£n ph·∫©m
// Import module emailController
const { sendOrderDeliveredEmail } = require('../controller/emailController');
const eventEmitter = require("../events/event.js"); // Import eventEmitter


//t·∫°o ƒë∆°n (c√≥ k·∫øt n·ªëi v·ªõi GHN)
exports.createOrder = async (req, res) => {
  try {
    const { shippingInfo, insurance_value, shipping_fee_input } = req.body;
    const userId = req.user.userId;

    // L·∫•y gi·ªè h√†ng c·ªßa ng∆∞·ªùi d√πng
    const cart = await Cart.findOne({ userId });
    if (!cart || cart.items.length === 0) {
      return res.status(400).json({ message: 'Gi·ªè h√†ng c·ªßa b·∫°n tr·ªëng.' });
    }

     // Ki·ªÉm tra s·ªë l∆∞·ª£ng trong kho tr∆∞·ªõc khi t·∫°o ƒë∆°n h√†ng
    for (let item of cart.items) {
      const product = await Product.findById(item.productId);  // L·∫•y s·∫£n ph·∫©m t·ª´ DB

      if (!product) {
        return res.status(404).json({ message: `S·∫£n ph·∫©m v·ªõi ID ${item.productId} kh√¥ng t·ªìn t·∫°i.` });
      }

      if (product.stock < item.quantity) {
        return res.status(400).json({
          message: `S·∫£n ph·∫©m ${product.name} ch·ªâ c√≤n ${product.stock} trong kho, kh√¥ng ƒë·ªß s·ªë l∆∞·ª£ng b·∫°n y√™u c·∫ßu.`,
        });
      }
    }


    // Chu·∫©n b·ªã d·ªØ li·ªáu g·ª≠i ƒë·∫øn GHN
    const ghnBody = {
      payment_type_id: 2,
      required_note: 'KHONGCHOXEMHANG',
      to_name: shippingInfo.fullName,
      to_phone: shippingInfo.phone,
      to_address: shippingInfo.address,
      to_ward_name: shippingInfo.wardName,
      to_district_name: shippingInfo.districtName,
      to_province_name: shippingInfo.cityName,
      length: 12,
      width: 12,
      height: 12,
      weight: 1500,
      insurance_value: insurance_value || 0,
      service_type_id: 2,
      items: req.body.items, // D·ªØ li·ªáu t·ª´ frontend, kh√¥ng c·∫ßn map l·∫°i
    };

    // G·ª≠i request ƒë·∫øn GHN
    const ghnResponse = await axios.post(
      'https://dev-online-gateway.ghn.vn/shiip/public-api/v2/shipping-order/create',
      ghnBody,
      {
        headers: {
          'token': '8be47059-f262-11ef-a653-3600c660ea00',
          'Content-Type': 'application/json',
          'ShopId': '196030',
        },
      }
    );

    //console.log("GHN Response:", JSON.stringify(ghnResponse.data, null, 2));

    const totalFee = ghnResponse?.data?.data?.total_fee || 0;
    const estimatedDeliveryDate = ghnResponse?.data?.data?.expected_delivery_time || null;



    // T√≠nh gi·∫£m gi√° ph√≠ v·∫≠n chuy·ªÉn
    const discount = shipping_fee_input ? shipping_fee_input - totalFee : 0;
  // T·∫°o ƒë∆°n h√†ng trong MongoDB
    const order = new Order({
    userId,
    shippingInfo,
    shippingFeeDetails: {
        mainFee: shipping_fee_input,
        discount: discount,
        finalFee: totalFee
    },
    items: cart.items,
    totalPrice: cart.totalPrice + totalFee, // C·ªông ph√≠ ship cu·ªëi c√πng v√†o t·ªïng gi√° tr·ªã ƒë∆°n h√†ng
    orderCode: ghnResponse?.data?.data?.order_code || null, // M√£ ƒë∆°n h√†ng t·ª´ GHN
    status: 'pending',
    estimatedDeliveryDate: estimatedDeliveryDate,
    });

    await order.save();

      // Ph√°t s·ª± ki·ªán khi t·∫°o ƒë∆°n h√†ng
    eventEmitter.emit("orderCreated", order);


    return res.status(201).json({
      message: 'ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng.',
      order,
    });
  } catch (error) {
    return res.status(500).json({
      message: 'L·ªói khi t·∫°o ƒë∆°n h√†ng.',
      error: error.message,
    });
  }
};

// l·∫•y danh s√°ch ƒë∆°n h√†ng c·ªßa user
exports.getOrdersByStatus = async (req, res) => {
  try {
    const userId = req.user.userId;
    const { status } = req.query;

    let query = { userId };
    if (status && status !== 'all') {
      query.status = status;
    }

    const orders = await Order.find(query)
        .populate({
          path: 'items.productId',
          select: 'name price images' // L·∫•y th√™m th√¥ng tin s·∫£n ph·∫©m
        })
        .sort({ orderDate: -1 }); // S·∫Øp x·∫øp theo ng√†y m·ªõi nh·∫•t (gi·∫£m d·∫ßn)

    return res.status(200).json({
      message: 'L·∫•y danh s√°ch ƒë∆°n h√†ng th√†nh c√¥ng.',
      orders,
    });
  } catch (error) {
    return res.status(500).json({
      message: 'L·ªói khi l·∫•y danh s√°ch ƒë∆°n h√†ng.',
      error: error.message,
    });
  }
};

// l·∫•y theo orderCode
exports.getOrderByCode = async (req, res) => {
  try {
    const { orderCode } = req.params; // L·∫•y orderCode t·ª´ params
    const userId = req.user.userId; // L·∫•y userId t·ª´ token

    // T√¨m ƒë∆°n h√†ng theo orderCode v√† ki·ªÉm tra quy·ªÅn truy c·∫≠p
    const order = await Order.findOne({ orderCode })
      .populate({
        path: 'items.productId',
        populate: {
          path: 'brand', // Populate th√™m th∆∞∆°ng hi·ªáu
          select: 'name' // Ch·ªâ l·∫•y tr∆∞·ªùng name c·ªßa th∆∞∆°ng hi·ªáu
        }
      });

    if (!order) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng.' });
    }

    // Ki·ªÉm tra xem user hi·ªán t·∫°i c√≥ ph·∫£i ch·ªß s·ªü h·ªØu c·ªßa ƒë∆°n h√†ng kh√¥ng
    if (order.userId.toString() !== userId) {
      return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p ƒë∆°n h√†ng n√†y.' });
    }

    return res.status(200).json({
      message: 'L·∫•y chi ti·∫øt ƒë∆°n h√†ng th√†nh c√¥ng.',
      order,
    });
  } catch (error) {
    return res.status(500).json({
      message: 'L·ªói khi l·∫•y chi ti·∫øt ƒë∆°n h√†ng.',
      error: error.message,
    });
  }
};

// ƒê·ªãnh nghƒ©a √°nh x·∫° tr·∫°ng th√°i t·ª´ API v√†o m√¥ h√¨nh c·ªßa b·∫°n
const statusMapping = {
    ready_to_pick: 'pending',
    picking: 'processed',
    money_collect_picking: 'processed',
    picked: 'processed',
    storing: 'processed',
    transporting: 'shipped',
    sorting: 'shipped',
    delivering: 'shipped',
    money_collect_delivering: 'shipped',
    delivered: 'delivered',
    delivery_fail: 'shipped',
    waiting_to_return: 'returned',
    return: 'returned',
    return_transporting: 'returned',
    return_sorting: 'returned',
    returning: 'returned',
    return_fail: 'returned',
    returned: 'returned',
    exception: 'canceled',
    cancel: 'canceled',
    damage: 'canceled',
    lost: 'canceled'
};

// c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n t·ª´ webhook
exports.updateOrderStatusFromWebhook = async (req, res) => {
    try {
        const { OrderCode, Status, Time } = req.body;

        if (!OrderCode || !Status) {
            return res.status(400).json({ message: "Thi·∫øu d·ªØ li·ªáu c·∫ßn thi·∫øt t·ª´ webhook." });
        }

        // T√¨m ƒë∆°n h√†ng theo m√£ OrderCode
        const order = await Order.findOne({ orderCode: OrderCode }).populate('userId');

        if (!order) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng." });
        }

        // Ki·ªÉm tra v√† √°nh x·∫° tr·∫°ng th√°i
        const mappedStatus = statusMapping[Status];

        if (!mappedStatus) {
            return res.status(400).json({ message: `Tr·∫°ng th√°i '${Status}' kh√¥ng h·ª£p l·ªá.` });
        }

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
        order.status = mappedStatus;
        order.updatedAt = new Date(Time);
        await order.save();

        console.log(`‚úÖ ƒê∆°n h√†ng ${OrderCode} ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t tr·∫°ng th√°i: [GHN '${Status}' => H·ªá th·ªëng: '${mappedStatus}']`);

        // Gi·∫£m s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong kho khi ƒë∆°n h√†ng ƒë∆∞·ª£c giao th√†nh c√¥ng
        if (mappedStatus === 'delivered') {
            try {
                // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng t·ªìn kho
                for (const item of order.items) {
                    const product = await Product.findById(item.productId);
                    if (product) {
                        product.stock -= item.quantity;
                        await product.save();
                        console.log(`üì¶ ƒê√£ gi·∫£m ${item.quantity} s·∫£n ph·∫©m ${product.name} trong kho, c√≤n l·∫°i: ${product.stock}`);
                    }
                }
                console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng t·ªìn kho cho ƒë∆°n h√†ng ${OrderCode}`);
            } catch (stockError) {
                console.error(`‚ùå L·ªói khi c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng t·ªìn kho cho ƒë∆°n h√†ng ${OrderCode}:`, stockError.message);
            }


              // Ph√°t s·ª± ki·ªán "orderDelivered" khi ƒë∆°n h√†ng giao th√†nh c√¥ng
            eventEmitter.emit('orderDelivered', order); // Ph√°t s·ª± ki·ªán v·ªõi ƒë·ªëi t∆∞·ª£ng ƒë∆°n h√†ng
            
            // G·ª≠i email th√¥ng b√°o
            try {
                const userEmail = order.userId?.email;
                if (userEmail) {
                    await sendOrderDeliveredEmail(userEmail, OrderCode);
                    console.log(`üì© Email ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn ${userEmail} cho ƒë∆°n h√†ng ${OrderCode}`);
                } else {
                    console.warn(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y email cho ƒë∆°n h√†ng ${OrderCode}, b·ªè qua g·ª≠i email.`);
                }
            } catch (emailError) {
                console.error(`‚ùå L·ªói khi g·ª≠i email cho ƒë∆°n h√†ng ${OrderCode}:`, emailError.message);
            }
        }

        return res.status(200).json({ 
            message: "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng.", 
            order 
        });

    } catch (error) {
        console.error("‚ùå L·ªói khi x·ª≠ l√Ω webhook:", error);
        return res.status(500).json({ message: "L·ªói khi x·ª≠ l√Ω webhook.", error: error.message });
    }
};


// l·∫•y danh s√°ch ƒë∆°n h√†ng (admin)
exports.getAllOrders = async (req, res) => {
  try {
    const { sortBy = 'orderDate', sortOrder = 'desc' } = req.query;

    // X√¢y d·ª±ng sort options
    const sortOptions = {};
    sortOptions[sortBy] = sortOrder === 'desc' ? -1 : 1;

    // Th·ª±c hi·ªán query v·ªõi populate
    const orders = await Order.find()
      .populate({
        path: 'userId',
        select: 'email username fullName phone' // Ch·ªâ l·∫•y c√°c tr∆∞·ªùng c·∫ßn thi·∫øt
      })
      .populate({
        path: 'items.productId',
        select: 'name price images' // Ch·ªâ l·∫•y c√°c tr∆∞·ªùng c·∫ßn thi·∫øt c·ªßa s·∫£n ph·∫©m
      })
      .sort(sortOptions);

    return res.status(200).json({
      message: 'L·∫•y danh s√°ch ƒë∆°n h√†ng th√†nh c√¥ng',
      data: {
        orders
      }
    });
  } catch (error) {
    console.error('L·ªói khi l·∫•y danh s√°ch ƒë∆°n h√†ng:', error);
    return res.status(500).json({
      message: 'ƒê√£ x·∫£y ra l·ªói khi l·∫•y danh s√°ch ƒë∆°n h√†ng',
      error: error.message
    });
  }
};


// H·ªßy ƒë∆°n h√†ng (ch·ªâ khi tr·∫°ng th√°i l√† 'pending')
exports.cancelOrder = async (req, res) => {
    try {
        const { orderCode } = req.params;
        const userId = req.user.userId;

        // T√¨m ƒë∆°n h√†ng
        const order = await Order.findOne({ orderCode, userId });
        if (!order) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng." });
        }

        // Ch·ªâ cho ph√©p h·ªßy n·∫øu tr·∫°ng th√°i l√† 'pending'
        if (order.status !== 'pending') {
            return res.status(400).json({ message: "Ch·ªâ c√≥ th·ªÉ h·ªßy ƒë∆°n h√†ng khi ƒëang ·ªü tr·∫°ng th√°i 'pending'." });
        }

        // G·ª≠i request h·ªßy ƒë∆°n ƒë·∫øn GHN
        const ghnResponse = await axios.post(
            'https://dev-online-gateway.ghn.vn/shiip/public-api/v2/switch-status/cancel',
            { order_codes: [orderCode] },
            {
                headers: {
                    'token': '8be47059-f262-11ef-a653-3600c660ea00',
                    'Content-Type': 'application/json',
                    'ShopId': '196030',
                },
            }
        );

        const cancelResult = ghnResponse?.data?.data?.[0];
        if (!cancelResult || !cancelResult.result) {
            return res.status(400).json({ message: `Kh√¥ng th·ªÉ h·ªßy ƒë∆°n h√†ng: ${cancelResult?.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh'}` });
        }

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng trong h·ªá th·ªëng
        order.status = 'canceled';
        await order.save();

         // Ph√°t s·ª± ki·ªán khi h·ªßy ƒë∆°n h√†ng
        eventEmitter.emit("orderCanceled", order);


        return res.status(200).json({
            message: "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c h·ªßy th√†nh c√¥ng.",
            order
        });
    } catch (error) {
        console.error("‚ùå L·ªói khi h·ªßy ƒë∆°n h√†ng:", error);
        return res.status(500).json({ message: "L·ªói khi h·ªßy ƒë∆°n h√†ng.", error: error.message });
    }
};

// H·ªßy ƒë∆°n h√†ng t·ª´ ph√≠a admin (kh√¥ng c·∫ßn x√°c th·ª±c userId)
exports.cancelOrderByAdmin = async (req, res) => {
    try {
        const { orderCode } = req.params;

        // T√¨m ƒë∆°n h√†ng kh√¥ng c·∫ßn ki·ªÉm tra userId
        const order = await Order.findOne({ orderCode });
        if (!order) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng." });
        }

        // G·ª≠i request h·ªßy ƒë∆°n ƒë·∫øn GHN
        const ghnResponse = await axios.post(
            'https://dev-online-gateway.ghn.vn/shiip/public-api/v2/switch-status/cancel',
            { order_codes: [orderCode] },
            {
                headers: {
                    'token': '8be47059-f262-11ef-a653-3600c660ea00',
                    'Content-Type': 'application/json',
                    'ShopId': '196030',
                },
            }
        );

        const cancelResult = ghnResponse?.data?.data?.[0];
        if (!cancelResult || !cancelResult.result) {
            return res.status(400).json({ message: `Kh√¥ng th·ªÉ h·ªßy ƒë∆°n h√†ng: ${cancelResult?.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh'}` });
        }

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng trong h·ªá th·ªëng
        order.status = 'canceled';
        await order.save();

        // Admin kh√¥ng c·∫ßn ph√°t emit s·ª± ki·ªán

        return res.status(200).json({
            message: "Admin ƒë√£ h·ªßy ƒë∆°n h√†ng th√†nh c√¥ng.",
            order
        });
    } catch (error) {
        console.error("‚ùå L·ªói khi admin h·ªßy ƒë∆°n h√†ng:", error);
        return res.status(500).json({ message: "L·ªói khi admin h·ªßy ƒë∆°n h√†ng.", error: error.message });
    }
};






